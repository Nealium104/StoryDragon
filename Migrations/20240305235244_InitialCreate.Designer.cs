// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoryDragon.Data;

#nullable disable

namespace StoryDragon.Migrations
{
    [DbContext(typeof(StoryDragonContext))]
    [Migration("20240305235244_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("CharacterPost", b =>
                {
                    b.Property<Guid>("CharactersCharacterId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PostsPostId")
                        .HasColumnType("TEXT");

                    b.HasKey("CharactersCharacterId", "PostsPostId");

                    b.HasIndex("PostsPostId");

                    b.ToTable("PostCharacters", (string)null);
                });

            modelBuilder.Entity("CharacterStory", b =>
                {
                    b.Property<Guid>("CharactersCharacterId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StoriesStoryID")
                        .HasColumnType("TEXT");

                    b.HasKey("CharactersCharacterId", "StoriesStoryID");

                    b.HasIndex("StoriesStoryID");

                    b.ToTable("StoryCharacters", (string)null);
                });

            modelBuilder.Entity("PostStory", b =>
                {
                    b.Property<Guid>("PostsPostId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StoriesStoryID")
                        .HasColumnType("TEXT");

                    b.HasKey("PostsPostId", "StoriesStoryID");

                    b.HasIndex("StoriesStoryID");

                    b.ToTable("PostStories", (string)null);
                });

            modelBuilder.Entity("StoryDragon.Models.Character", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CharacterDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CharacterShortDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("CharacterId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("StoryDragon.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("StoryDragon.Models.Story", b =>
                {
                    b.Property<Guid>("StoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoryDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoryText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoryTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("StoryID");

                    b.HasIndex("UserId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("StoryDragon.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CharacterPost", b =>
                {
                    b.HasOne("StoryDragon.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoryDragon.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterStory", b =>
                {
                    b.HasOne("StoryDragon.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoryDragon.Models.Story", null)
                        .WithMany()
                        .HasForeignKey("StoriesStoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostStory", b =>
                {
                    b.HasOne("StoryDragon.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoryDragon.Models.Story", null)
                        .WithMany()
                        .HasForeignKey("StoriesStoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoryDragon.Models.Character", b =>
                {
                    b.HasOne("StoryDragon.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoryDragon.Models.Post", b =>
                {
                    b.HasOne("StoryDragon.Models.User", null)
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoryDragon.Models.Story", b =>
                {
                    b.HasOne("StoryDragon.Models.User", null)
                        .WithMany("Stories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoryDragon.Models.User", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Posts");

                    b.Navigation("Stories");
                });
#pragma warning restore 612, 618
        }
    }
}
